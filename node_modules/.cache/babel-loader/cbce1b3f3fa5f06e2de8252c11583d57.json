{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ReyAlex\\\\Documents\\\\GitHub\\\\desafio3practicodps\\\\src\\\\providers\\\\UserProvider.jsx\";\nimport React, { Component, createContext } from \"react\";\nimport { auth, generateUserDocument } from \"../firebase\"; // Context se usa principalmente cuando algunos datos tienen que ser accesibles\n// por muchos componentes en diferentes niveles de anidamiento. \n// Aplícalo con moderación porque hace que la reutilización de \n// componentes sea más difícil.\n// Context nos permite pasar un valor a lo profundo del árbol de componentes\n// sin pasarlo explícitamente a través de cada componente.\n// Crear un Context para el user actual (con \"null\" como valor predeterminado).\n\nexport const UserContext = createContext({\n  user: null\n});\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: null\n    };\n\n    this.componentDidMount = async () => {\n      console.log(\" UserProvider componentDidMount : \");\n      auth.onAuthStateChanged(async userAuth => {\n        const user = await generateUserDocument(userAuth);\n        console.log(\" Usuario triggered componentDidMount : \" + user);\n        this.setState({\n          user\n        });\n        console.log(\"++++++++++++++++++++++++++++++++++\");\n      });\n    };\n\n    this.setUserContext = usertmp => {\n      this.setState({\n        usertmp\n      });\n    };\n  }\n\n  render() {\n    const user = this.state.user;\n    console.log(\" render -> Usuario UserProvider : \" + user);\n    return (// Usa un Provider para pasar el user actual al árbol de abajo.\n      // Cualquier componente puede leerlo, sin importar qué tan profundo se encuentre.\n      // En este ejemplo, estamos pasando \"user\" como valor actual.\n      React.createElement(UserContext.Provider, {\n        value: user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, this.props.children)\n    );\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["C:/Users/ReyAlex/Documents/GitHub/desafio3practicodps/src/providers/UserProvider.jsx"],"names":["React","Component","createContext","auth","generateUserDocument","UserContext","user","UserProvider","state","componentDidMount","console","log","onAuthStateChanged","userAuth","setState","setUserContext","usertmp","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,SAASC,IAAT,EAAeC,oBAAf,QAA2C,aAA3C,C,CAEA;AACA;AACA;AACA;AAGA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGH,aAAa,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAjC;;AAEP,MAAMC,YAAN,SAA2BN,SAA3B,CAAqC;AAAA;AAAA;AAAA,SAEnCO,KAFmC,GAE3B;AAACF,MAAAA,IAAI,EAAE;AAAP,KAF2B;;AAAA,SAUnCG,iBAVmC,GAUf,YAAY;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACAR,MAAAA,IAAI,CAACS,kBAAL,CAAwB,MAAMC,QAAN,IAAkB;AACxC,cAAMP,IAAI,GAAG,MAAMF,oBAAoB,CAACS,QAAD,CAAvC;AACAH,QAAAA,OAAO,CAACC,GAAR,CAAY,4CAA4CL,IAAxD;AACA,aAAKQ,QAAL,CAAc;AAAER,UAAAA;AAAF,SAAd;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,OALD;AAMD,KAlBkC;;AAAA,SAoBnCI,cApBmC,GAoBjBC,OAAD,IAAa;AAC5B,WAAKF,QAAL,CAAc;AAAEE,QAAAA;AAAF,OAAd;AACD,KAtBkC;AAAA;;AAwBnCC,EAAAA,MAAM,GAAG;AAAA,UACCX,IADD,GACU,KAAKE,KADf,CACCF,IADD;AAEPI,IAAAA,OAAO,CAACC,GAAR,CAAY,uCAAuCL,IAAnD;AACA,WACE;AACA;AACA;AACA,0BAAC,WAAD,CAAa,QAAb;AAAsB,QAAA,KAAK,EAAEA,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKY,KAAL,CAAWC,QADd;AAJF;AAQD;;AAnCkC;;AAqCrC,eAAeZ,YAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\r\nimport { auth, generateUserDocument } from \"../firebase\";\r\n\r\n// Context se usa principalmente cuando algunos datos tienen que ser accesibles\r\n// por muchos componentes en diferentes niveles de anidamiento. \r\n// Aplícalo con moderación porque hace que la reutilización de \r\n// componentes sea más difícil.\r\n\r\n\r\n// Context nos permite pasar un valor a lo profundo del árbol de componentes\r\n// sin pasarlo explícitamente a través de cada componente.\r\n// Crear un Context para el user actual (con \"null\" como valor predeterminado).\r\nexport const UserContext = createContext({ user: null });\r\n\r\nclass UserProvider extends Component {\r\n\r\n  state = {user: null};\r\n\r\n  /* \r\n  Esto activaba al triggered  cuando los usuarios iniciaban sesión, \r\n  cerraban sesión o cuando el token de identificación del usuario \r\n  cambiaba en situaciones como la caducidad del token o el cambio de \r\n  contraseña. el triggered solo se activa al iniciar o cerrar sesión.\r\n  */\r\n  componentDidMount = async () => {\r\n    console.log(\" UserProvider componentDidMount : \");\r\n    auth.onAuthStateChanged(async userAuth => {\r\n      const user = await generateUserDocument(userAuth);\r\n      console.log(\" Usuario triggered componentDidMount : \" + user);   \r\n      this.setState({ user });      \r\n      console.log(\"++++++++++++++++++++++++++++++++++\");    \r\n    });\r\n  };\r\n\r\n  setUserContext = (usertmp) => {  \r\n    this.setState({ usertmp });    \r\n  };\r\n\r\n  render() {\r\n    const { user } = this.state;\r\n    console.log(\" render -> Usuario UserProvider : \" + user);\r\n    return (\r\n      // Usa un Provider para pasar el user actual al árbol de abajo.\r\n      // Cualquier componente puede leerlo, sin importar qué tan profundo se encuentre.\r\n      // En este ejemplo, estamos pasando \"user\" como valor actual.\r\n      <UserContext.Provider value={user}>\r\n        {this.props.children}\r\n      </UserContext.Provider>\r\n    );\r\n  }\r\n}\r\nexport default UserProvider;\r\n"]},"metadata":{},"sourceType":"module"}